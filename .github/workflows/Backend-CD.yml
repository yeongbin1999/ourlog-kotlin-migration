name: Backend CD

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'infra/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. 코드 체크아웃
      - uses: actions/checkout@v3

      # 2. Docker 빌드 환경
      - uses: docker/setup-buildx-action@v3

      # 3. GHCR 로그인
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 4. Docker 이미지 빌드 및 Push
      - name: Build and push backend Docker image
        run: |
          IMAGE=ghcr.io/${{ github.repository_owner }}/my-backend:latest
          docker build -t $IMAGE ./infra/backend
          docker push $IMAGE

      # 5. EC2 배포 (Blue-Green + NPM API)
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            IMAGE=ghcr.io/${{ github.repository_owner }}/my-backend:latest

            # 활성/비활성 컨테이너 판단
            if docker ps --filter "name=backend-blue" | grep backend-blue; then
                ACTIVE=blue
                INACTIVE=green
                PORT_ACTIVE=8081
                PORT_INACTIVE=8082
            else
                ACTIVE=green
                INACTIVE=blue
                PORT_ACTIVE=8082
                PORT_INACTIVE=8081
            fi

            # 새 컨테이너 실행
            docker pull $IMAGE
            docker stop backend-$INACTIVE || true
            docker rm backend-$INACTIVE || true
            docker run -d --name backend-$INACTIVE \
              --network common \
              -p $PORT_INACTIVE:8080 \
              -e SPOTIFY_CLIENT_ID="${{ secrets.SPOTIFY_CLIENT_ID }}" \
              -e SPOTIFY_CLIENT_SECRET="${{ secrets.SPOTIFY_CLIENT_SECRET }}" \
              -e TMDB_API_KEY="${{ secrets.TMDB_API_KEY }}" \
              -e LIBRARY_API_KEY="${{ secrets.LIBRARY_API_KEY }}" \
              -e GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" \
              -e GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
              -e NAVER_CLIENT_ID="${{ secrets.NAVER_CLIENT_ID }}" \
              -e NAVER_CLIENT_SECRET="${{ secrets.NAVER_CLIENT_SECRET }}" \
              -e KAKAO_CLIENT_ID="${{ secrets.KAKAO_CLIENT_ID }}" \
              -e KAKAO_CLIENT_SECRET="${{ secrets.KAKAO_CLIENT_SECRET }}" \
              -e REDIS_HOST="${{ secrets.REDIS_HOST }}" \
              -e REDIS_PORT="6379" \
              -e SPRING_DATASOURCE_URL="${{ secrets.MYSQL_URL }}" \
              -e SPRING_DATASOURCE_USERNAME="${{ secrets.MYSQL_USER }}" \
              -e SPRING_DATASOURCE_PASSWORD="${{ secrets.MYSQL_PASSWORD }}" \
              $IMAGE

            # Health Check
            echo "⏱ Waiting for new container to become healthy..."
            for i in {1..30}; do
              STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:$PORT_INACTIVE/actuator/health)
              if [ "$STATUS" -eq 200 ]; then
                echo "✅ New container is healthy!"
                break
              fi
              sleep 2
            done

            # NPM API로 업스트림 전환
            curl -X PATCH "http://127.0.0.1:81/api/nginx/proxy-hosts/${{ secrets.NPM_PROXY_ID }}" \
                 -H "Authorization: Bearer ${{ secrets.NPM_API_TOKEN }}" \
                 -H "Content-Type: application/json" \
                 -d "{\"forward_host\": \"127.0.0.1\", \"forward_port\": $PORT_INACTIVE}"

            # 이전 컨테이너 종료
            docker stop backend-$ACTIVE || true
            docker rm backend-$ACTIVE || true

            echo "✅ Deployment complete. Active container: $INACTIVE"
